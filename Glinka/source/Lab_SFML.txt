#include <SFML\Graphics.hpp>
#include <iostream>
#include <fstream>
#include <iomanip>
#include <conio.h>
#include <string>
#include <sstream>
#include <ctime>//Для счётчика времени
using namespace sf;
using namespace std;

#define User 10 // Персонаж 
#define exit_us 100 //Выход с лабиринта
#define Size_map 20 // 20*20 размер карты
#define Bonus 8 //Бонус +10 к очкам
#define Danger 2 /*Колючка от которой перс теряет очки,
				когда у перса будет отрицательное кол-во
				очков он проиграет
				*/

int size_level = 20;//размер уровня
int size_unit = 30;//размер одного блока
int x, y, x_ex, y_ex;// коорд. персонажа, коорд. выхода с лабиринта 
int mas[20][20];//массив для карты лабиринта 
int score = 0;//Очки
int time_st, time_ex, tt=0;//начальнее время, конец времени, разница конца и начала 

//Поиск Героя и выхода с карты
void search() {
	for (int i = 0; i < size_level; i++)
	{
		for (int j = 0; j < size_level; j++)
		{
			if (mas[i][j] == User) {
				x = i;
				y = j;
				std::cout << x << " " << y << std::endl;
			}
			if (mas[i][j] == exit_us) {
				x_ex = i;
				y_ex = j;
				std::cout << x_ex << " " << y_ex << std::endl;
			}
		}
	}
}

//Функция считывания карты(массива) с файла txt, включает в себя выбор файла с картой
void  Matrix_map(int(&array)[20][20], int& x, int& y) {

	//istream readingFromFile("ПРОСТО_ИМЯ_ФАЙЛА.txt", ios::in);

	string n_map = "1.txt";//инициализация пер. номера карты 
	int a = 1;

	cout << "Choose a cat number from 1 to 5 (Custom - 6): ";
tryAgain:
	cin >> a;
	if (0 > a || a > 6) {
		cout << "Please enter a valid number:";
		goto tryAgain;
	}
	if (a == 6) {
		cout << "Enter card name:";
	not_cor:
		cin >> n_map;
	}
	else n_map[0] = a + 48;

	//Открываем файл txt с картой
	ifstream f("Maps\\" + n_map, ios::in);

	if (!f.is_open()) { // вызов метода is_open()
		cout << "The file is not open! oops error...\n\n" << endl;
		cout << "Please enter a valid name:";
		goto not_cor;
	}

	//читаем файл и прочитанное запоминаем в массив
	for (int i = 0; i < Size_map; i++)
		for (int j = 0; j < Size_map; j++) {
			f >> array[i][j];
			//Находим координаты персонажана карте
			if (array[i][j] == User) {
				x = i;
				y = j;
			}
		}
	f.close();
}

void input_user(RenderWindow& window) {

	Event event;

	while (window.pollEvent(event)) {
		if (event.type == Event::Closed) {
			window.close();
		}

		if (event.type == Event::KeyPressed) {
			//Вверх
			if ((event.key.code == Keyboard::Up || event.key.code == Keyboard::W)
				&& mas[x - 1][y] != 1 && (x != 1 || mas[x - 1][y] == exit_us)) {

				if (mas[x - 1][y] == 8) score += 10;
				if (mas[x - 1][y] == 2) score -= 10;
				if (mas[x-1][y] == 100) cout << "Win!";
				mas[x][y] = 0;
				x = x - 1;
				mas[x][y] = 10;
			}
			//Влево
			else if ((event.key.code == Keyboard::Left || event.key.code == Keyboard::A)
				&& mas[x][y - 1] != 1 && (y != 1 || mas[x][y - 1] == exit_us)) {
				if (mas[x][y - 1] == 8) score += 10;
				if (mas[x][y - 1] == 2) score -= 10;
				if (mas[x][y - 1] == 100) cout << "Win!";
				mas[x][y] = 0;
				y = y - 1;
				mas[x][y] = 10;
			}
			//Вправо
			else if ((event.key.code == Keyboard::Right || event.key.code == Keyboard::D)
				&& mas[x][y + 1] != 1 && (y != 18 || mas[x][y + 1] == exit_us)) {
				if (mas[x][y + 1] == 8) score += 10;
				if (mas[x][y + 1] == 2) score -= 10;
				if (mas[x][y + 1] == 100) { cout << "Win!";  }
				mas[x][y] = 0;
				y = y + 1;
				mas[x][y] = 10;
			}
			//Вниз
			else if ((event.key.code == Keyboard::Down || event.key.code == Keyboard::S)
				&& mas[x + 1][y] != 1 && (x != 18 || mas[x + 1][y] == exit_us)) {
				if (mas[x + 1][y] == 8) score += 10;
				if (mas[x + 1][y] == 2) score -= 10;
				if (mas[x + 1][y] == 100) cout<<"Win!";
				mas[x][y] = 0;
				x = x + 1;
				mas[x][y] = 10;
			}
		}
		
	}
}

void table_fun(RenderWindow& window) {
	Image table_img; //создаем объект Image (изображение)
	table_img.loadFromFile("image/table.png");//загружаем в него файл
	Texture table_texture;//создаем объект Texture (текстура)
	table_texture.loadFromImage(table_img);//передаем в него объект Image (изображения)
	Sprite table_sprite;//создаем объект Sprite(спрайт)
	table_sprite.setTexture(table_texture);//передаём в него объект Texture (текстуры)
	table_sprite.setPosition(600, 0);//задаем начальные координаты появления спрайта
	window.draw(table_sprite);//отрисовка спрайта 

	Font font;
	font.loadFromFile("image/calibri.ttf");//загрузка шрифта
	Text text_w("", font, 32), timegame("", font, 32), End_game("Game over!", font, 60);
	
	
	ostringstream Score_t, time_t, endgame;
	
	//Вывод очков
	text_w.setFillColor(Color::Black);
	Score_t << score;
	text_w.setString("" + Score_t.str());
	text_w.setPosition(760, 40);
	window.draw(text_w);

	if (score < 0) {
		End_game.setFillColor(Color::Red);
		End_game.setStyle(sf::Text::Bold | sf::Text::Underlined);
		End_game.setPosition(200, 240);
		window.draw(End_game);
		
	}

	//Вывод времени
	timegame.setFillColor(Color::Black);
	
	time_t << tt;
	
	timegame.setString(""+ time_t.str());
	timegame.setPosition(760, 5);
	window.draw(timegame);
	
}

void Draw(RenderWindow& window) {
	RectangleShape r(Vector2f(30.f, 30.f));
	RectangleShape r1(Vector2f(30.f, 30.f));
	RectangleShape r2(Vector2f(30.f, 30.f));
	RectangleShape r3(Vector2f(30.f, 30.f));
	RectangleShape r4(Vector2f(30.f, 30.f));
	r.setFillColor(Color(0, 0, 0));
	
	window.clear(Color(143, 188, 143));

	//Отрисовка всех объектов
	for (int i = 0; i < size_level; i++)
	{
		for (int j = 0; j < size_level; j++)
		{
			if (mas[i][j] != 0) {
				if (mas[i][j] == 1) {
					r.setPosition(j * size_unit, i * size_unit); // перемещаем его в нижний ряд справа от многоугольника
					window.draw(r); // отрисовка прямоугольника
				}
				else if (mas[i][j] == 2) {
					r3.setPosition(j * size_unit, i * size_unit); // перемещаем его в нижний ряд справа от многоугольника
					r3.setFillColor(Color(255, 0, 0));
					window.draw(r3); // отрисовка прямоугольника
				}
				else if (mas[i][j] == 8) {
					r1.setPosition(j * size_unit, i * size_unit); // перемещаем его в нижний ряд справа от многоугольника
					r1.setFillColor(Color(255, 255, 0));
					window.draw(r1); // отрисовка прямоугольника
				}
				else if (mas[i][j] == 100) {
					r4.setPosition(j * size_unit, i * size_unit); // перемещаем его в нижний ряд справа от многоугольника
					r4.setFillColor(Color(0, 0, 255));
					window.draw(r4); // отрисовка прямоугольника
				}
				else if (mas[i][j] == 10) {
					r2.setPosition(j * size_unit, i * size_unit); // перемещаем его в нижний ряд справа от многоугольника
					r2.setFillColor(Color(0, 128, 0));
					x = i; y = j;
					window.draw(r2); // отрисовка прямоугольника
				}

			}
		}
	}
	//Вывод таблицы со счётом
	table_fun(window);
}

int main()
{
	setlocale(LC_ALL, "Russian");
	RenderWindow window(VideoMode(800, 800), L"Лабиринт");
	window.setFramerateLimit(10);//оптимальное кол-во кадров нагрузка на карту не более 5%, иначе 40%

	Matrix_map(mas, x, y);
	search();

	time_st = clock();//запуск времени
	while (window.isOpen())
	{
		input_user(window);//Управление
		Draw(window);//Отрисовка
		window.display();

		time_ex = clock(); // засекаем время окончания
		if (score < 0) { system("pause"); return 0;}
		else tt = (time_ex - time_st) / CLOCKS_PER_SEC;
	}
	return 0;
}
